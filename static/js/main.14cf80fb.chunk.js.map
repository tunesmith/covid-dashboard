{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["sampleData","MyResponsiveSankey","data","margin","top","right","bottom","left","align","colors","scheme","nodeOpacity","nodeThickness","nodeInnerPadding","nodeSpacing","nodeBorderWidth","nodeBorderColor","from","modifiers","linkOpacity","linkHoverOthersOpacity","enableLinkGradient","labelPosition","labelPadding","labelTextColor","isInteractive","legends","anchor","direction","translateX","itemWidth","itemHeight","itemDirection","itemsSpacing","itemTextColor","symbolSize","effects","on","style","App","className","width","height","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kPAGMA,EAAa,CACf,MAAS,CACL,CACI,GAAM,aACN,MAAS,WAEb,CACI,GAAM,WACN,MAAS,WAEb,CACI,GAAM,cACN,MAAS,WAEb,CACI,GAAM,YACN,MAAS,WAEb,CACI,GAAM,cACN,MAAS,WAEb,CACI,GAAM,aACN,MAAS,WAEb,CACI,GAAM,WACN,MAAS,WAEb,CACI,GAAM,WACN,MAAS,YAOjB,MAAS,CACL,CACI,OAAU,aACV,OAAU,cACV,MAAS,IAEb,CACI,OAAU,aACV,OAAU,aACV,MAAS,IAEb,CACI,OAAU,WACV,OAAU,cACV,MAAS,IAEb,CACI,OAAU,WACV,OAAU,YACV,MAAS,IAEb,CACI,OAAU,YACV,OAAU,cACV,MAAS,IAEb,CACI,OAAU,YACV,OAAU,aACV,MAAS,IAEb,CACI,OAAU,aACV,OAAU,WACV,MAAQ,IAEZ,CACI,OAAU,aACV,OAAU,WACV,MAAS,MAefC,EAAqB,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAF,OACvB,cAAC,IAAD,CACIA,KAAMA,EACNC,OAAQ,CAACC,IAAK,GAAIC,MAAO,IAAKC,OAAQ,GAAIC,KAAM,IAChDC,MAAM,QACNC,OAAQ,CAACC,OAAQ,cACjBC,YAAa,EACbC,cAAe,GACfC,iBAAkB,EAClBC,YAAa,GACbC,gBAAiB,EACjBC,gBAAiB,CAACC,KAAM,QAASC,UAAW,CAAC,CAAC,SAAU,MACxDC,YAAa,GACbC,uBAAwB,GACxBC,oBAAoB,EACpBC,cAAc,SAEdC,aAAc,EACdC,eAAgB,CAACP,KAAM,QAASC,UAAW,CAAC,CAAC,SAAU,KACvDO,eAAe,EACfC,QAAS,CACL,CACIC,OAAQ,eACRC,UAAW,SACXC,WAAY,IACZC,UAAW,IACXC,WAAY,GACZC,cAAe,gBACfC,aAAc,EACdC,cAAe,OACfC,WAAY,GACZC,QAAS,CACL,CACIC,GAAI,QACJC,MAAO,CACHJ,cAAe,eAiC5BK,MAxBf,WACI,OACI,qBAAKC,UAAU,MAAf,SACI,gCACI,qMAKA,+FAGA,qBAAKF,MAAO,CAAEG,MAAO,IAAKC,OAAO,KAAjC,SACI,cAAC,EAAD,CAAoBxC,KAAMF,MAE9B,2JC/ID2C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.14cf80fb.chunk.js","sourcesContent":["import './App.css';\nimport {ResponsiveSankey} from \"@nivo/sankey\";\n\nconst sampleData = {\n    \"nodes\": [\n        {\n            \"id\": \"Uninfected\",\n            \"color\": \"#000000\"\n        },\n        {\n            \"id\": \"Infected\",\n            \"color\": \"#000000\"\n        },\n        {\n            \"id\": \"Undiagnosed\",\n            \"color\": \"#5c5c5c\"\n        },\n        {\n            \"id\": \"Diagnosed\",\n            \"color\": \"#f8a8a8\"\n        },\n        {\n            \"id\": \"Home-tested\",\n            \"color\": \"#000000\"\n        },\n        {\n            \"id\": \"Lab-tested\",\n            \"color\": \"#000000\"\n        },\n        {\n            \"id\": \"Negative\",\n            \"color\": \"#000000\"\n        },\n        {\n            \"id\": \"Positive\",\n            \"color\": \"#000000\"\n        },\n        // {\n        //     \"id\": \"Positivity Ratio\",\n        //     \"color\": \"#000000\"\n        // }\n    ],\n    \"links\": [\n        {\n            \"source\": \"Uninfected\",\n            \"target\": \"Home-tested\",\n            \"value\": 20\n        },\n        {\n            \"source\": \"Uninfected\",\n            \"target\": \"Lab-tested\",\n            \"value\": 20\n        },\n        {\n            \"source\": \"Infected\",\n            \"target\": \"Undiagnosed\",\n            \"value\": 20\n        },\n        {\n            \"source\": \"Infected\",\n            \"target\": \"Diagnosed\",\n            \"value\": 80\n        },\n        {\n            \"source\": \"Diagnosed\",\n            \"target\": \"Home-tested\",\n            \"value\": 10\n        },\n        {\n            \"source\": \"Diagnosed\",\n            \"target\": \"Lab-tested\",\n            \"value\": 70\n        },\n        {\n            \"source\": \"Lab-tested\",\n            \"target\": \"Negative\",\n            \"value\":70\n        },\n        {\n            \"source\": \"Lab-tested\",\n            \"target\": \"Positive\",\n            \"value\": 20\n        },\n        // {\n        //     \"source\": \"Negative\",\n        //     \"target\": \"Positivity Ratio\",\n        //     \"value\":50\n        // },\n        // {\n        //     \"source\": \"Positive\",\n        //     \"target\": \"Positivity Ratio\",\n        //     \"value\":20\n        // }\n    ]\n};\n\nconst MyResponsiveSankey = ({data}) => (\n    <ResponsiveSankey\n        data={data}\n        margin={{top: 40, right: 160, bottom: 40, left: 50}}\n        align=\"start\"\n        colors={{scheme: 'category10'}}\n        nodeOpacity={1}\n        nodeThickness={18}\n        nodeInnerPadding={3}\n        nodeSpacing={24}\n        nodeBorderWidth={0}\n        nodeBorderColor={{from: 'color', modifiers: [['darker', 0.8]]}}\n        linkOpacity={0.5}\n        linkHoverOthersOpacity={0.1}\n        enableLinkGradient={true}\n        labelPosition=\"inside\"\n        // labelOrientation=\"vertical\"\n        labelPadding={6}\n        labelTextColor={{from: 'color', modifiers: [['darker', 1]]}}\n        isInteractive={false}\n        legends={[\n            {\n                anchor: 'bottom-right',\n                direction: 'column',\n                translateX: 130,\n                itemWidth: 100,\n                itemHeight: 14,\n                itemDirection: 'right-to-left',\n                itemsSpacing: 2,\n                itemTextColor: '#999',\n                symbolSize: 14,\n                effects: [\n                    {\n                        on: 'hover',\n                        style: {\n                            itemTextColor: '#000'\n                        }\n                    }\n                ]\n            }\n        ]}\n    />\n)\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <div>\n                <p>\n                    When trying to measure the impact of COVID in an area, the first thing we need\n                    to do is measure how many people have it. Diagnosing this officially requires\n                    a test.\n                </p>\n                <p>\n                    Testing, however is a challenge (actual numbers not to scale):\n                </p>\n                <div style={{ width: 700, height:300 }}>\n                    <MyResponsiveSankey data={sampleData}/>\n                </div>\n                <p>\n                    Our reported \"test positivity\" stats don't take into account the undiagnosed,\n                    or the people who take tests at home.\n                </p>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}