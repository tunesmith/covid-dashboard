{"version":3,"sources":["App.tsx","reportWebVitals.js","index.js"],"names":["doublingTime","rt","period","Math","log","today","Date","casesPerDeath","metroData","reduce","acc","val","date","getTime","newCases","newDeaths","exactChain","infectionRate","chain","ceil","doublingLow","doublingHigh","deathLow","deathHigh","testPositivityData","id","data","multnomahData","filter","el","testPositivityRatio","map","x","y","washingtonData","caseCountData","caseDensity","icuData","icuCapacityRatio","targetPercent","vacRate","eff","rTarget","rtInfection","undefined","rate","range","vaccinationsCompletedRatio","max","rtMax","vaccineData","vaccinationsInitiatedRatio","vaccines","targetLower","targetUpper","lower","upper","sampleData","MyResponsiveSankey","margin","top","right","bottom","left","align","colors","scheme","nodeOpacity","nodeThickness","nodeInnerPadding","nodeSpacing","nodeBorderWidth","nodeBorderColor","from","modifiers","linkOpacity","linkHoverOthersOpacity","enableLinkGradient","labelPosition","labelPadding","labelTextColor","isInteractive","TestPositivityLines","markers","axis","value","lineStyle","stroke","strokeWidth","legendPosition","xScale","format","type","useUTC","xFormat","yScale","min","stacked","reverse","yFormat","curve","axisTop","axisRight","axisBottom","tickSize","tickPadding","tickRotation","legend","legendOffset","axisLeft","enablePoints","pointSize","pointColor","theme","pointBorderWidth","pointBorderColor","pointLabelYOffset","enableSlices","sliceTooltip","slice","style","background","padding","border","points","xFormatted","point","color","serieColor","serieId","yFormatted","legends","anchor","direction","justify","translateX","translateY","itemsSpacing","itemDirection","itemWidth","itemHeight","itemOpacity","symbolSize","symbolShape","symbolBorderColor","effects","on","itemBackground","CaseDensityLines","ProtectionLayer","series","areaGenerator","innerHeight","area","d","y0","y1","curveMonotoneX","defs","lineWidth","spacing","rotation","fill","fillOpacity","MyInfectionLine","layers","AreaLayer","VaccinationLines","IcuLines","tickValues","signal","signals","Map","honoluluData","clarkData","larimerData","denverData","badgeData","MyResponsiveRadar","keys","indexBy","maxValue","borderWidth","borderColor","gridLevels","gridShape","gridLabel","blah","gridLabelOffset","enableDots","dotSize","dotColor","dotBorderWidth","dotBorderColor","enableDotLabel","dotLabel","index","realValue","parseFloat","toString","toFixed","realPercent","dotLabelYOffset","get","key","blendMode","animate","App","className","width","height","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d8f6a5a2.chunk.js","sourcesContent":["import './App.css';\nimport {ResponsiveSankey} from \"@nivo/sankey\";\nimport {ResponsiveLine} from \"@nivo/line\";\nimport {ResponsiveRadar} from '@nivo/radar'\nimport * as metroData from './data/metro.json';\nimport * as multnomahData from './data/multnomah.json';\nimport * as washingtonData from './data/washington.json';\nimport * as clarkData from './data/clark.json';\nimport * as honoluluData from './data/honolulu.json';\nimport * as larimerData from './data/larimer.json';\nimport * as denverData from './data/denver.json';\nimport { Defs } from '@nivo/core'\nimport { area, curveMonotoneX } from 'd3-shape'\n\nconst doublingTime = (rt: number, period: number): number => {\n    return period * ( Math.log(2) / Math.log(rt) )\n}\n\nconst today = new Date();\nconst thirtyDayCases = metroData.actualsTimeseries.reduce<number>((acc, val) => {\n    const entryDate = new Date(val.date);\n    if (entryDate.getTime() + 30*24*60*60*1000 > today.getTime()) {\n        if (val.newCases) {\n            acc += val.newCases;\n        }\n    }\n    return acc;\n}, 0);\nconst thirtyDayDeaths = metroData.actualsTimeseries.reduce<number>((acc, val) => {\n    const entryDate = new Date(val.date);\n    if (entryDate.getTime() + 30*24*60*60*1000 > today.getTime()) {\n        if (val.newDeaths) {\n            acc += val.newDeaths;\n        }\n    }\n    return acc;\n}, 0);\n\nconst casesPerDeath = thirtyDayCases / thirtyDayDeaths;\nconst exactChain = Math.log(1 - (casesPerDeath * (1 - metroData.metrics.infectionRate))) / Math.log(metroData.metrics.infectionRate);\nconst chain = Math.ceil(exactChain);\nconst doublingLow = Math.ceil(doublingTime(metroData.metrics.infectionRate, 5));\nconst doublingHigh = Math.ceil(doublingTime(metroData.metrics.infectionRate, 16));\nconst deathLow = Math.ceil(exactChain * 5);\nconst deathHigh = Math.ceil(exactChain * 16);\n\nconst testPositivityData = [{\n    id: 'Multnomah County',\n    data: multnomahData.metricsTimeseries.filter(el => el.testPositivityRatio !== null).map(el => {\n        return {\n            x: el.date,\n            y: el.testPositivityRatio\n        }\n    })\n},\n    {\n        id: 'Washington County',\n        data: washingtonData.metricsTimeseries.filter(el => el.testPositivityRatio !== null && el.testPositivityRatio >= 0).map(el => {\n            return {\n                x: el.date,\n                y: el.testPositivityRatio\n            }\n        })\n    }];\n\n// console.log(testPositivityData);\n\nconst caseCountData = [{\n    id: 'Metro Area',\n    data: metroData.metricsTimeseries.filter(el => el.caseDensity !== null).map(el => {\n        return {\n            x: el.date,\n            y: el.caseDensity\n        }\n    })\n}]\n\nconst icuData = [{\n    id: 'Metro Area',\n    data: metroData.metricsTimeseries.filter(el => el.icuCapacityRatio !== null).map(el => {\n        return {\n            x: el.date,\n            y: el.icuCapacityRatio\n        }\n    })\n}, {\n\n    id: 'Multnomah County',\n    data: multnomahData.metricsTimeseries.filter(el => el.icuCapacityRatio !== null).map(el => {\n        return {\n            x: el.date,\n            y: el.icuCapacityRatio\n        }\n    })\n},\n    {\n        id: 'Washington County',\n        data: washingtonData.metricsTimeseries.filter(el => el.icuCapacityRatio !== null && el.icuCapacityRatio < 1).map(el => {\n            return {\n                x: el.date,\n                y: el.icuCapacityRatio\n            }\n        })\n    }]\n\n/**\n * Given a current rt, and a target rt (usually 1), and a current vaccination rate and efficacy\n * against infection, calculate what future vaccination rate would move the current rt to rTarget.\n *\n * CDC says that mRNA vaccines are between 26% and 84% effective (95% certainty, 66% estimated)\n * against infection, and there is an additional 40%-60% protection against vaccinated people\n * passing the virus to others, which yields a range of 55.6 - 93.6 effectiveness.\n *\n * To get a single number, an estimate of 66% efficacy and 50% resistance would work, or 83%\n * overall.\n *\n * @param rt\n * @param vacRate\n * @param eff\n * @param rTarget\n */\nconst targetPercent = (rt: number, vacRate: number, eff: number, rTarget: number): number => {\n    return (1 - (rTarget * (\n        (1 - (vacRate * eff)) /\n            rt))\n    ) / eff\n}\n\n/**\n * rInit(rt, vacRate, eff) = rt / (1 - (vacRate * eff))\n */\nconst rInit = (rt: number, vacRate: number, eff: number): number => {\n    return rt / (1 - (vacRate * eff))\n}\n\nconst rtInfection = [{\n    id: 'Metro Area',\n    data: metroData.metricsTimeseries.filter(el => el.infectionRate !== null && el.infectionRate !== undefined).map(el => {\n        const rate: number = el.infectionRate as number;\n        const range = el.vaccinationsCompletedRatio ? rInit(rate, el.vaccinationsCompletedRatio as number, 0.83) : rate;\n        return {\n            x: el.date,\n            y: el.infectionRate,\n            range: Math.max(range, rate)\n        }\n    })\n// }, {\n//     id: 'No-Vaccine Rt',\n//     data: metroData.metricsTimeseries.filter(el => el.infectionRate !== null && el.infectionRate !== undefined).map(el => {\n//         const rate: number = el.infectionRate as number;\n//         const range = el.vaccinationsCompletedRatio ? rInit(rate, el.vaccinationsCompletedRatio as number, 0.83) : rate;\n//         return {\n//             x: el.date,\n//             y: range\n//         }\n//     })\n}];\n\nconst rtMax = rtInfection[0].data.reduce<number>((acc, val) => { return (val.range > acc) ? val.range : acc }, 0);\n\nconst vaccineData = [{\n    id: 'PDX Metro - Vaccine #1',\n    data: metroData.metricsTimeseries.filter(el => el.vaccinationsInitiatedRatio !== null && el.vaccinationsInitiatedRatio !== undefined).map(el => {\n        return {\n            x: el.date,\n            y: el.vaccinationsInitiatedRatio\n        }\n    })\n}, {\n    id: 'PDX Metro - Vaccine #2',\n    data: metroData.metricsTimeseries.filter(el => el.vaccinationsCompletedRatio !== null && el.vaccinationsCompletedRatio !== undefined).map(el => {\n        const vaccines = el.vaccinationsCompletedRatio as number;\n        const targetLower: number = el.infectionRate ? targetPercent(el.infectionRate, vaccines, 0.936, 1) : vaccines;\n        const targetUpper: number = el.infectionRate ? targetPercent(el.infectionRate, vaccines, 0.556, 1) : vaccines;\n        return {\n            x: el.date,\n            rt: el.infectionRate,\n            y: el.vaccinationsCompletedRatio,\n            lower: Math.max(targetLower, vaccines),\n            upper: Math.max(targetUpper, vaccines)\n        }\n    })\n}]\n\nconst sampleData = {\n    \"nodes\": [\n        {\n            \"id\": \"Uninfected\",\n            // \"color\": \"#000000\"\n        },\n        {\n            \"id\": \"Infected\",\n            // \"color\": \"#000000\"\n        },\n        {\n            \"id\": 'Untested',\n            // \"color\": \"#5c5c5c\"\n        },\n        // {\n        //     \"id\": \"Diagnosed\",\n        //     \"color\": \"#f8a8a8\"\n        // },\n        {\n            \"id\": \"Home-tested\",\n            // \"color\": \"#000000\"\n        },\n        {\n            \"id\": \"Lab-tested\",\n            // \"color\": \"#000000\"\n        },\n        {\n            \"id\": \"Negative\",\n            // \"color\": \"#000000\"\n        },\n        {\n            \"id\": \"Positive\",\n            // \"color\": \"#000000\"\n        },\n        // {\n        //     \"id\": \"Positivity Ratio\",\n        //     \"color\": \"#000000\"\n        // }\n    ],\n    \"links\": [\n        {\n            \"source\": \"Uninfected\",\n            \"target\": \"Home-tested\",\n            \"value\": 20\n        },\n        {\n            \"source\": \"Uninfected\",\n            \"target\": \"Lab-tested\",\n            \"value\": 70\n        },\n        {\n            \"source\": \"Uninfected\",\n            \"target\": 'Untested',\n            \"value\": 60\n        },\n        {\n            \"source\": \"Infected\",\n            \"target\": 'Untested',\n            \"value\": 10\n        },\n        // {\n        //     \"source\": \"Infected\",\n        //     \"target\": \"Diagnosed\",\n        //     \"value\": 80\n        // },\n        {\n            // \"source\": \"Diagnosed\",\n            \"source\": \"Infected\",\n            \"target\": \"Home-tested\",\n            \"value\": 10\n        },\n        {\n            // \"source\": \"Diagnosed\",\n            \"source\": \"Infected\",\n            \"target\": \"Lab-tested\",\n            \"value\": 20\n        },\n        {\n            \"source\": \"Lab-tested\",\n            \"target\": \"Negative\",\n            \"value\": 70\n        },\n        {\n            \"source\": \"Lab-tested\",\n            \"target\": \"Positive\",\n            \"value\": 20\n        },\n        // {\n        //     \"source\": \"Negative\",\n        //     \"target\": \"Positivity Ratio\",\n        //     \"value\":50\n        // },\n        // {\n        //     \"source\": \"Positive\",\n        //     \"target\": \"Positivity Ratio\",\n        //     \"value\":20\n        // }\n    ]\n};\n\nconst MyResponsiveSankey = ({data}: any) => (\n    <ResponsiveSankey\n        data={data}\n        margin={{top: 40, right: 50, bottom: 40, left: 50}}\n        align=\"start\"\n        // sort=\"descending\"\n        colors={{scheme: 'category10'}}\n        nodeOpacity={1}\n        nodeThickness={18}\n        nodeInnerPadding={3}\n        nodeSpacing={24}\n        nodeBorderWidth={0}\n        nodeBorderColor={{from: 'color', modifiers: [['darker', 0.8]]}}\n        linkOpacity={0.5}\n        linkHoverOthersOpacity={0.1}\n        enableLinkGradient={true}\n        labelPosition=\"inside\"\n        // labelOrientation=\"vertical\"\n        labelPadding={6}\n        labelTextColor={{from: 'color', modifiers: [['darker', 1]]}}\n        isInteractive={false}\n    />\n)\n\nconst TestPositivityLines = ({data}: any) => (\n    <ResponsiveLine\n        markers={[\n            {\n                axis: 'y',\n                value: 0.05,\n                lineStyle: {stroke: '#b0413e', strokeWidth: 1},\n                // legend: 'y marker at 0',\n                legendPosition: 'bottom-left',\n            },\n        ]}\n        data={data}\n        margin={{top: 50, right: 140, bottom: 50, left: 80}}\n        xScale={{\n            format: \"%Y-%m-%d\",\n            type: \"time\",\n            useUTC: false,\n        }}\n        xFormat=\"time:%Y-%m-%d\"\n        yScale={{type: 'linear', min: 0, max: 'auto', stacked: false, reverse: false}}\n        // yFormat=\" >-.2f\"\n        yFormat=\" >-.1%\"\n        curve=\"linear\"\n        axisTop={null}\n        axisRight={null}\n        axisBottom={{\n            // tickValues: \"every 3 month\",\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: 0,\n            format: \"%Y-%m\",\n            legend: \"Date\",\n            legendOffset: 36,\n            legendPosition: \"middle\"\n        }}\n        axisLeft={{\n            // orient: 'left',\n            format: \">-.0%\",\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: 0,\n            legend: 'Percent Positive',\n            legendOffset: -45,\n            legendPosition: 'middle'\n        }}\n        enablePoints={false}\n        pointSize={10}\n        pointColor={{theme: 'background'}}\n        pointBorderWidth={2}\n        pointBorderColor={{from: 'serieColor'}}\n        pointLabelYOffset={-12}\n        isInteractive={true}\n        // useMesh={true}\n        enableSlices={\"x\"}\n        sliceTooltip={({slice}) => {\n            return (\n                <div\n                    style={{\n                        background: 'white',\n                        padding: '9px 12px',\n                        border: '1px solid #ccc',\n                    }}\n                >\n                    <div>{slice.points[0].data.xFormatted}</div>\n                    {slice.points.map(point => (\n                        <div\n                            key={point.id}\n                            style={{\n                                color: point.serieColor,\n                                padding: '3px 0',\n                            }}\n                        >\n                            <strong>{point.serieId}</strong> {point.data.yFormatted}\n                        </div>\n                    ))}\n                </div>\n            )\n        }}\n        legends={[\n            {\n                anchor: 'bottom-right',\n                direction: 'column',\n                justify: false,\n                translateX: 140,\n                translateY: 0,\n                itemsSpacing: 0,\n                itemDirection: 'left-to-right',\n                itemWidth: 120,\n                itemHeight: 20,\n                itemOpacity: 0.75,\n                symbolSize: 12,\n                symbolShape: 'circle',\n                symbolBorderColor: 'rgba(0, 0, 0, .5)',\n                effects: [\n                    {\n                        on: 'hover',\n                        style: {\n                            itemBackground: 'rgba(0, 0, 0, .03)',\n                            itemOpacity: 1\n                        }\n                    }\n                ]\n            }\n        ]}\n    />\n)\n\nconst CaseDensityLines = ({data}: any) => (\n    <ResponsiveLine\n        markers={[\n            {\n                axis: 'y',\n                value: 10,\n                lineStyle: {stroke: '#b0413e', strokeWidth: 1},\n                // legend: 'y marker at 0',\n                legendPosition: 'bottom-left',\n            },\n        ]}\n        data={data}\n        margin={{top: 50, right: 110, bottom: 50, left: 60}}\n        // xScale={{ format: \"%Y-%m-%dT%H:%M:%S.%L%Z\", type: \"time\" }}\n        xScale={{\n            format: \"%Y-%m-%d\",\n            type: \"time\",\n            useUTC: false,\n        }}\n        xFormat=\"time:%Y-%m-%d\"\n        yScale={{type: 'linear', min: 0, max: 'auto', stacked: false, reverse: false}}\n        // yFormat=\" >-.2f\"\n        curve=\"cardinal\"\n        axisTop={null}\n        axisRight={null}\n        axisBottom={{\n            // tickValues: \"every 3 month\",\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: 0,\n            format: \"%Y-%m\",\n            legend: \"Date\",\n            legendOffset: 36,\n            legendPosition: \"middle\"\n        }}\n        axisLeft={{\n            // orient: 'left',\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: 0,\n            legend: 'Cases / 100k',\n            legendOffset: -40,\n            legendPosition: 'middle'\n        }}\n        enablePoints={false}\n        pointSize={10}\n        pointColor={{theme: 'background'}}\n        pointBorderWidth={2}\n        pointBorderColor={{from: 'serieColor'}}\n        pointLabelYOffset={-12}\n        isInteractive={true}\n        // useMesh={true}\n        enableSlices={\"x\"}\n        sliceTooltip={({slice}) => {\n            return (\n                <div\n                    style={{\n                        background: 'white',\n                        padding: '9px 12px',\n                        border: '1px solid #ccc',\n                    }}\n                >\n                    <div>{slice.points[0].data.xFormatted}</div>\n                    {slice.points.map(point => (\n                        <div\n                            key={point.id}\n                            style={{\n                                color: point.serieColor,\n                                padding: '3px 0',\n                            }}\n                        >\n                            <strong>{point.serieId}</strong> {point.data.yFormatted}\n                        </div>\n                    ))}\n                </div>\n                    )\n        }}\n        legends={[\n            {\n                anchor: 'bottom-right',\n                direction: 'column',\n                justify: false,\n                translateX: 100,\n                translateY: 0,\n                itemsSpacing: 0,\n                itemDirection: 'left-to-right',\n                itemWidth: 80,\n                itemHeight: 20,\n                itemOpacity: 0.75,\n                symbolSize: 12,\n                symbolShape: 'circle',\n                symbolBorderColor: 'rgba(0, 0, 0, .5)',\n                effects: [\n                    {\n                        on: 'hover',\n                        style: {\n                            itemBackground: 'rgba(0, 0, 0, .03)',\n                            itemOpacity: 1\n                        }\n                    }\n                ]\n            }\n        ]}\n    />\n)\n\nconst ProtectionLayer = ({ series, xScale, yScale, innerHeight }: any) => {\n    // console.log(series[0].data);\n    // console.log(series);\n    const areaGenerator = area()\n        .x((d: [any, any]) => {\n            return xScale(d['data' as any].x)\n        })\n        .y0((d: [any, any]) => {\n            const data = d['data' as any];\n            // return yScale(targetPercent(data.rt, data.y, 0.936, 1))\n            // return Math.min(data.y, yScale(targetPercent(data.rt, data.y, 0.936, 1)))\n            return yScale(data.y);\n        })\n        .y1((d: [any, any]) => {\n            const data = d['data' as any];\n            // return yScale(targetPercent(data.rt, data.y, 0.556, 1)))\n            return yScale(data.range);\n        })\n        .curve(curveMonotoneX)\n    // const areaGenerator = area()\n    //     .x((d, e) => xScale(d.data.x))\n    //     .y0(d => Math.min(innerHeight, yScale(d.data.y - 40)))\n    //     .y1(d => yScale(d.data.y + 10))\n    //     .curve(curveMonotoneX)\n\n    return (\n        <>\n            <Defs\n                defs={[\n                    {\n                        id: 'pattern',\n                        type: 'patternLines',\n                        background: 'transparent',\n                        color: '#fc9926',\n                        lineWidth: 1,\n                        spacing:5,\n                        rotation: -45,\n                    },\n                ]}\n            />\n            <path\n                d={areaGenerator(series[0].data) || undefined}\n                fill=\"url(#pattern)\"\n                fillOpacity={0.2}\n                stroke=\"#fc9926\"\n                strokeWidth={0.5}\n            />\n        </>\n    )\n}\n\nconst MyInfectionLine = ({data}: any) => (\n    <ResponsiveLine\n        markers={[\n            {\n                axis: 'y',\n                value: 1,\n                lineStyle: {stroke: '#b0413e', strokeWidth: 1},\n                // legend: 'y marker at 0',\n                legendPosition: 'bottom-left',\n            },\n        ]}\n        data={data}\n        margin={{top: 50, right: 110, bottom: 50, left: 60}}\n        // xScale={{ format: \"%Y-%m-%dT%H:%M:%S.%L%Z\", type: \"time\" }}\n        xScale={{\n            format: \"%Y-%m-%d\",\n            type: \"time\",\n            useUTC: false,\n        }}\n        // xFormat=\"time:%Y-%m-%dT%H:%M:%S.%L%Z\"\n        xFormat=\"time:%Y-%m-%d\"\n        yScale={{type: 'linear', min: 'auto', max: rtMax, stacked: false, reverse: false}}\n        // yFormat=\" >-.2f\"\n        curve=\"cardinal\"\n        axisTop={null}\n        axisRight={null}\n        axisBottom={{\n            // tickValues: \"every 3 month\",\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: 0,\n            format: \"%Y-%m\",\n            legend: \"Date\",\n            legendOffset: 36,\n            legendPosition: \"middle\"\n        }}\n        axisLeft={{\n            // orient: 'left',\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: 0,\n            legend: 'Rt',\n            legendOffset: -40,\n            legendPosition: 'middle'\n        }}\n        enablePoints={false}\n        pointSize={10}\n        pointColor={{theme: 'background'}}\n        pointBorderWidth={2}\n        pointBorderColor={{from: 'serieColor'}}\n        pointLabelYOffset={-12}\n        layers={[\n            'grid',\n            'markers',\n            'areas',\n            ProtectionLayer,\n            'lines',\n            'slices',\n            'axes',\n            'points',\n            'legends',\n        ]}\n        isInteractive={true}\n        // useMesh={true}\n        enableSlices={\"x\"}\n        sliceTooltip={({slice}) => {\n            return (\n                <div\n                    style={{\n                        background: 'white',\n                        padding: '9px 12px',\n                        border: '1px solid #ccc',\n                    }}\n                >\n                    <div>{slice.points[0].data.xFormatted}</div>\n                    {slice.points.map(point => (\n                        <div\n                            key={point.id}\n                            style={{\n                                color: point.serieColor,\n                                padding: '3px 0',\n                            }}\n                        >\n                            <strong>{point.serieId}</strong> {point.data.yFormatted}\n                        </div>\n                    ))}\n                </div>\n            )\n        }}\n        legends={[\n            {\n                anchor: 'bottom-right',\n                direction: 'column',\n                justify: false,\n                translateX: 100,\n                translateY: 0,\n                itemsSpacing: 0,\n                itemDirection: 'left-to-right',\n                itemWidth: 80,\n                itemHeight: 20,\n                itemOpacity: 0.75,\n                symbolSize: 12,\n                symbolShape: 'circle',\n                symbolBorderColor: 'rgba(0, 0, 0, .5)',\n                effects: [\n                    {\n                        on: 'hover',\n                        style: {\n                            itemBackground: 'rgba(0, 0, 0, .03)',\n                            itemOpacity: 1\n                        }\n                    }\n                ]\n            }\n        ]}\n    />\n)\n\nconst AreaLayer = ({ series, xScale, yScale, innerHeight }: any) => {\n    // console.log(series[0].data);\n    // console.log(series);\n    const areaGenerator = area()\n        .x((d: [any, any]) => {\n            return xScale(d['data' as any].x)\n        })\n        .y0((d: [any, any]) => {\n            const data = d['data' as any];\n            // return yScale(targetPercent(data.rt, data.y, 0.936, 1))\n            // return Math.min(data.y, yScale(targetPercent(data.rt, data.y, 0.936, 1)))\n            return yScale(data.lower);\n        })\n        .y1((d: [any, any]) => {\n            const data = d['data' as any];\n            // return yScale(targetPercent(data.rt, data.y, 0.556, 1)))\n            return yScale(data.upper);\n        })\n        .curve(curveMonotoneX)\n    // const areaGenerator = area()\n    //     .x((d, e) => xScale(d.data.x))\n    //     .y0(d => Math.min(innerHeight, yScale(d.data.y - 40)))\n    //     .y1(d => yScale(d.data.y + 10))\n    //     .curve(curveMonotoneX)\n\n    return (\n        <>\n            <Defs\n                defs={[\n                    {\n                        id: 'pattern',\n                        type: 'patternLines',\n                        background: 'transparent',\n                        color: '#fc9926',\n                        lineWidth: 1,\n                        spacing:5,\n                        rotation: -45,\n                    },\n                ]}\n            />\n            <path\n                d={areaGenerator(series[1].data) || undefined}\n                fill=\"url(#pattern)\"\n                fillOpacity={0.6}\n                stroke=\"#fc9926\"\n                strokeWidth={1.5}\n            />\n        </>\n    )\n}\n\nconst VaccinationLines = ({data}: any) => (\n    <ResponsiveLine\n        data={data}\n        margin={{top: 50, right: 160, bottom: 50, left: 60}}\n        colors={{\"scheme\":\"category10\"}}\n        xScale={{\n            format: \"%Y-%m-%d\",\n            type: \"time\",\n            useUTC: false,\n        }}\n        xFormat=\"time:%Y-%m-%d\"\n        yScale={{type: 'linear', min: 'auto', max: 1, stacked: false, reverse: false}}\n        // yFormat=\" >-.2f\"\n        yFormat=\" >-.1%\"\n        curve=\"cardinal\"\n        axisTop={null}\n        axisRight={null}\n        axisBottom={{\n            // tickValues: \"every 3 month\",\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: 0,\n            format: \"%Y-%m\",\n            legend: \"Date\",\n            legendOffset: 36,\n            legendPosition: \"middle\"\n        }}\n        axisLeft={{\n            // orient: 'left',\n            format: \">-.0%\",\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: 0,\n            legend: 'Vaccination %',\n            legendOffset: -45,\n            legendPosition: 'middle'\n        }}\n        enablePoints={false}\n        pointSize={10}\n        pointColor={{theme: 'background'}}\n        pointBorderWidth={2}\n        pointBorderColor={{from: 'serieColor'}}\n        pointLabelYOffset={-12}\n        layers={[\n            'grid',\n            'markers',\n            'areas',\n            AreaLayer,\n            'lines',\n            'slices',\n            'axes',\n            'points',\n            'legends',\n        ]}\n        isInteractive={true}\n        // useMesh={true}\n        enableSlices={\"x\"}\n        sliceTooltip={({slice}) => {\n            return (\n                <div\n                    style={{\n                        background: 'white',\n                        padding: '9px 12px',\n                        border: '1px solid #ccc',\n                    }}\n                >\n                    <div>{slice.points[0].data.xFormatted}</div>\n                    {slice.points.map(point => (\n                        <div\n                            key={point.id}\n                            style={{\n                                color: point.serieColor,\n                                padding: '3px 0',\n                            }}\n                        >\n                            <strong>{point.serieId}</strong> {point.data.yFormatted}\n                        </div>\n                    ))}\n                </div>\n            )\n        }}\n        legends={[\n            {\n                anchor: 'bottom-right',\n                direction: 'column',\n                justify: false,\n                translateX: 100,\n                translateY: 0,\n                itemsSpacing: 0,\n                itemDirection: 'left-to-right',\n                itemWidth: 80,\n                itemHeight: 20,\n                itemOpacity: 0.75,\n                symbolSize: 12,\n                symbolShape: 'circle',\n                symbolBorderColor: 'rgba(0, 0, 0, .5)',\n                effects: [\n                    {\n                        on: 'hover',\n                        style: {\n                            itemBackground: 'rgba(0, 0, 0, .03)',\n                            itemOpacity: 1\n                        }\n                    }\n                ]\n            }\n        ]}\n    />\n)\n\nconst IcuLines = ({data}: any) => (\n    <ResponsiveLine\n        markers={[\n            {\n                axis: 'y',\n                value: 0.85,\n                lineStyle: {stroke: '#b0413e', strokeWidth: 1},\n                // legend: 'y marker at 0',\n                legendPosition: 'bottom-left',\n            },\n        ]}\n        data={data}\n        margin={{top: 50, right: 140, bottom: 50, left: 80}}\n        xScale={{\n            format: \"%Y-%m-%d\",\n            type: \"time\",\n            useUTC: false,\n        }}\n        xFormat=\"time:%Y-%m-%d\"\n        yScale={{type: 'linear', min: 'auto', max: 1, stacked: false, reverse: false}}\n        // yFormat=\" >-.2f\"\n        yFormat=\" >-.0%\"\n        curve=\"cardinal\"\n        axisTop={null}\n        axisRight={null}\n        axisBottom={{\n            tickValues: \"every 3 month\",\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: 0,\n            format: \"%Y-%m\",\n            legend: \"Date\",\n            legendOffset: 36,\n            legendPosition: \"middle\"\n        }}\n        axisLeft={{\n            // orient: 'left',\n            format: \">-.0%\",\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: 0,\n            legend: 'ICU Usage',\n            legendOffset: -45,\n            legendPosition: 'middle'\n        }}\n        enablePoints={false}\n        pointSize={10}\n        pointColor={{theme: 'background'}}\n        pointBorderWidth={2}\n        pointBorderColor={{from: 'serieColor'}}\n        pointLabelYOffset={-12}\n        isInteractive={true}\n        // useMesh={true}\n        enableSlices={\"x\"}\n        sliceTooltip={({slice}) => {\n            return (\n                <div\n                    style={{\n                        background: 'white',\n                        padding: '9px 12px',\n                        border: '1px solid #ccc',\n                    }}\n                >\n                    <div>{slice.points[0].data.xFormatted}</div>\n                    {slice.points.map(point => (\n                        <div\n                            key={point.id}\n                            style={{\n                                color: point.serieColor,\n                                padding: '3px 0',\n                            }}\n                        >\n                            <strong>{point.serieId}</strong> {point.data.yFormatted}\n                        </div>\n                    ))}\n                </div>\n            )\n        }}\n        legends={[\n            {\n                anchor: 'bottom-right',\n                direction: 'column',\n                justify: false,\n                translateX: 140,\n                translateY: 0,\n                itemsSpacing: 0,\n                itemDirection: 'left-to-right',\n                itemWidth: 120,\n                itemHeight: 20,\n                itemOpacity: 0.75,\n                symbolSize: 12,\n                symbolShape: 'circle',\n                symbolBorderColor: 'rgba(0, 0, 0, .5)',\n                effects: [\n                    {\n                        on: 'hover',\n                        style: {\n                            itemBackground: 'rgba(0, 0, 0, .03)',\n                            itemOpacity: 1\n                        }\n                    }\n                ]\n            }\n        ]}\n    />\n)\n\nconst signal = (data: any): string => {\n    if ((data.infectionRate > 1) || (data.caseDensity > 10) || (data.testPositivityRatio > 0.05) || (data.icuCapacityRatio >= 0.85)) {\n        return 'red';\n    }\n    return 'green';\n}\n\n\nconst signals: Map<string, string> = new Map<string, string>([\n    [\"multnomah\", signal(multnomahData.metrics)],\n    [\"washington\", signal(washingtonData.metrics)],\n    [\"honolulu\", signal(honoluluData.metrics)],\n    [\"clark\", signal(clarkData.metrics)],\n    [\"larimer\", signal(larimerData.metrics)],\n    [\"denver\", signal(denverData.metrics)],\n]);\n\nconst badgeData = [\n    {\n        'signal': 'rt',\n        'multnomah': multnomahData.metrics.infectionRate,\n        'washington': washingtonData.metrics.infectionRate,\n        'honolulu': honoluluData.metrics.infectionRate,\n        'clark': clarkData.metrics.infectionRate,\n        'larimer': larimerData.metrics.infectionRate,\n        'denver': denverData.metrics.infectionRate,\n    },\n    {\n        'signal': 'caseDensity',\n        'multnomah': multnomahData.metrics.caseDensity / 10,\n        'washington': washingtonData.metrics.caseDensity / 10,\n        'honolulu': honoluluData.metrics.caseDensity / 10,\n        'clark': clarkData.metrics.caseDensity / 10,\n        'larimer': larimerData.metrics.caseDensity / 10,\n        'denver': denverData.metrics.caseDensity / 10,\n    },\n    {\n        'signal': 'testPositivity',\n        'multnomah': multnomahData.metrics.testPositivityRatio / 0.05,\n        'washington': washingtonData.metrics.testPositivityRatio / 0.05,\n        'honolulu': honoluluData.metrics.testPositivityRatio / 0.05,\n        'clark': clarkData.metrics.testPositivityRatio / 0.05,\n        'larimer': larimerData.metrics.testPositivityRatio / 0.05,\n        'denver': denverData.metrics.testPositivityRatio / 0.05,\n    },\n    {\n        'signal': 'icuUtilization',\n        'multnomah': multnomahData.metrics.icuCapacityRatio / 0.85,\n        'washington': washingtonData.metrics.icuCapacityRatio / 0.85,\n        'honolulu': honoluluData.metrics.icuCapacityRatio / 0.85,\n        'clark': clarkData.metrics.icuCapacityRatio / 0.85,\n        'larimer': larimerData.metrics.icuCapacityRatio / 0.85,\n        'denver': denverData.metrics.icuCapacityRatio / 0.85,\n    }\n]\n\nconst MyResponsiveRadar = ({data, keys}: any) => (\n    <ResponsiveRadar\n        data={data}\n        keys={keys}\n        indexBy=\"signal\"\n        maxValue={1.25}\n        margin={{top: 80, right: 120, bottom: 100, left: 20}}\n        curve=\"linearClosed\"\n        borderWidth={1}\n        borderColor={{from: 'color'}}\n        gridLevels={1.25}\n        gridShape=\"circular\"\n        gridLabel={(blah) => {\n            return null;\n        }}\n        gridLabelOffset={36}\n        enableDots={true}\n        dotSize={10}\n        // dotColor={{ theme: 'background' }}\n        dotColor={(blah) => {\n            if (blah.value > 1) {\n                return 'red';\n            }\n            return 'green';\n        }}\n        dotBorderWidth={2}\n        dotBorderColor={(blah) => {\n            if (blah.value > 1) {\n                return 'red';\n            }\n            return 'green';\n        }}\n        enableDotLabel={true}\n        dotLabel={(blah) => {\n            if (blah.index === \"caseDensity\") {\n                const realValue = blah.value * 10;\n                return 'Cases / 100k = ' + parseFloat(realValue.toString()).toFixed(1);\n            } else if (blah.index === \"testPositivity\") {\n                const realPercent = blah.value * 0.05 * 100\n                return 'Test Positivity: ' + parseFloat(realPercent.toString()).toFixed(1) + \"%\"\n            } else if (blah.index === \"icuUtilization\") {\n                const realPercent = blah.value * 0.85 * 100\n                return 'ICU Usage: ' + parseFloat(realPercent.toString()).toFixed(0) + \"%\"\n            }\n            return 'Rt: ' + blah.value;\n        }}\n        dotLabelYOffset={-12}\n        // colors={{scheme: 'nivo'}}\n        colors={(blah) => {\n            return signals.get(blah.key) || 'gray';\n        }}\n        fillOpacity={0.15}\n        blendMode=\"multiply\"\n        animate={true}\n        // motionConfig=\"wobbly\"\n        isInteractive={false}\n    />\n)\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <div style={{width: 700}}>\n                <p>\n                    (Metro Data last updated {metroData.lastUpdatedDate}. Data is from the CovidActNow\n                    API, which comes from the NYTimes data set.)\n                </p>\n                <p>\n                    When trying to measure the impact of COVID in an area, the first thing we need\n                    to do is measure how many people have it. Diagnosing this officially requires\n                    a test.\n                </p>\n                <p>\n                    Testing, however is a challenge. At any given time, a collection of people is\n                    either infected or uninfected, and they each choose whether or not to get tested.\n                    (The following graph is a conceptual estimate; numbers not to scale.)\n                </p>\n                <div style={{width: 700, height: 300}}>\n                    <MyResponsiveSankey data={sampleData}/>\n                </div>\n                <p>\n                    \"Test positivity\" stats only calculate positives and negatives from lab tests,\n                    and so they miss undiagnosed cases, as well as home testing. Additionally, as infection\n                    prevalence increases, if we don't have enough tests to meet the demand, test positivity\n                    increases. Therefore, an increase in test positivity is an indication of an outbreak,\n                    even if recorded case count still appears low. For this reason, the CDC says any\n                    level above 5% is cause for concern.\n                </p>\n                <div style={{width: 700, height: 300}}>\n                    <TestPositivityLines data={testPositivityData}/>\n                </div>\n                <p>\n                    That said, while testing may not capture every case, a rise in test positivity rate\n                    does tend to correlate with an increased level of cases. CDC tracks this through \"daily\n                    new cases per 100k population\", and says there is increased virus prevalence when the\n                    metric reaches 10 or above.\n                </p>\n                <div style={{width: 700, height: 300}}>\n                    <CaseDensityLines data={caseCountData}/>\n                </div>\n                <p>\n                    An effective reproductive number can be derived from the case count data and other data.\n                    The effective reproductive number, or Rt, is how many people an infected person infects\n                    on average. Any number above 1 means the outbreak is growing over time. In other words,\n                    the cases will double over some time period, more quickly as Rt increases. The shaded\n                    area is an estimate of what regional Rt would be if not for the vaccines.\n                </p>\n                <div style={{width: 700, height: 300}}>\n                    <MyInfectionLine data={rtInfection}/>\n                </div>\n                <p>\n                    The current Rt for the Portland metro area expects cases to double\n                    every <b>{doublingLow}</b> to <b>{doublingHigh}</b> days.\n                    Currently, given the 30-day case rate and death rate in this region, one infection\n                    will cause a death after <b>{chain}</b> infection generations on average, or\n                    within <b>{deathLow}</b> to <b>{deathHigh}</b> days if Rt stays steady.\n                </p>\n                <p>\n                    Rt responds to what level of mitigation is in place. Ultimately, without any other\n                    mitigation, a disease runs its course by infecting everyone, multiple times if necessary,\n                    until sufficient natural immunity is met. In the case of COVID-19, this approach would\n                    cause far too much human suffering, including loss of life from other conditions due\n                    to overcrowded hospitals. So we look for other forms of mitigation, including masks,\n                    social distancing, lockdowns, and especially vaccinations - whatever is sufficient to\n                    get an outbreak under control and get Rt under 1.\n                </p>\n                <p>\n                    We can infer a target vaccination level given the current Rt, which changes as the\n                    mitigation level changes. For instance, kids returning to school reduces social\n                    distancing. As mitigation decreases, Rt increases, and therefore the target vaccination\n                    level increases.\n                </p>\n                <p>\n                    Target vaccination levels, indicated with patterned lines below, are determined through\n                    herd immunity calculations. The calculation takes into account infection efficacy of vaccines,\n                    combined with the reduced probability of vaccinated people passing on the virus to others.\n                </p>\n                <div style={{width: 700, height: 300}}>\n                    <VaccinationLines data={vaccineData}/>\n                </div>\n                <p>\n                    As a serious disease increases in prevalence, hospitalizations will increase as well.\n                    Ultimately, deaths increase too, both from the disease, and from hospitals unable to\n                    give routine service due to overcrowding. So we also track ICU capacity. Anything above\n                    85% utilization is considered critical:\n                </p>\n                <div style={{width: 700, height: 300}}>\n                    <IcuLines data={icuData}/>\n                </div>\n                <p>\n                    I wanted to come up with a personal indicator that uses each of these signals to\n                    help to determine what level of caution I should act with.\n                    </p>\n                <p>\n                    One thing that became clear is that the level of personal risk is different\n                    than the level of community risk. Being vaccinated, my risk of serious\n                    disease is lower than my risk of passing the virus to others, since viruses\n                    have lower efficacy against infection than they do against hospitalization.\n                    </p>\n                <p>\n                    For that reason, when the disease is spreading or has high prevalence, I\n                    don't want to contribute to spread. So I'm choosing to limit personal contact\n                    - indoors, maskless gatherings with vaccinated people - when any of the\n                    above indicators are above the limit.\n                    </p>\n                <p>The signal is pretty conservative. Others may be comfortable being more social\n                    if there is moderate ({'>'} 10) or even substantial ({'>'} 50) prevalence. But generally,\n                    if Rt is greater than 1, it means the outbreak will get worse over time, so it's\n                    a good signal to be in favor of greater temporary mitigation, until the outbreak\n                    is under control again.\n                    </p>\n                <p>\n                    This signal can be drawn visually.\n                </p>\n                <p>\n                    Washington County ({washingtonData.lastUpdatedDate}):\n                </p>\n                <div style={{width: 700, height: 300}}>\n                    <MyResponsiveRadar data={badgeData} keys={['washington']}/>\n                </div>\n                <p>\n                    Multnomah County ({multnomahData.lastUpdatedDate}):\n                </p>\n                <div style={{width: 700, height: 300}}>\n                    <MyResponsiveRadar data={badgeData} keys={['multnomah']}/>\n                </div>\n                <p>\n                    Here are some badges for other counties of family:\n                </p>\n                <p>\n                    Clark County (Las Vegas, NV) ({clarkData.lastUpdatedDate}):\n                </p>\n                <div style={{width: 700, height: 300}}>\n                    <MyResponsiveRadar data={badgeData} keys={['clark']}/>\n                </div>\n                <p>\n                    Honolulu County ({honoluluData.lastUpdatedDate}):\n                </p>\n                <div style={{width: 700, height: 300}}>\n                    <MyResponsiveRadar data={badgeData} keys={['honolulu']}/>\n                </div>\n                <p>\n                    Larimer County (Fort Collins, CO) ({larimerData.lastUpdatedDate}):\n                </p>\n                <div style={{width: 700, height: 300}}>\n                    <MyResponsiveRadar data={badgeData} keys={['larimer']}/>\n                </div>\n                <p>\n                    Denver County ({denverData.lastUpdatedDate}):\n                </p>\n                <div style={{width: 700, height: 300}}>\n                    <MyResponsiveRadar data={badgeData} keys={['denver']}/>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}