{"version":3,"sources":["App.tsx","reportWebVitals.js","index.js"],"names":["rtInfection","id","data","metroData","filter","el","infectionRate","map","x","date","y","testPositivityData","multnomahData","testPositivityRatio","washingtonData","caseCountData","caseDensity","icuData","icuCapacityRatio","sampleData","MyResponsiveSankey","margin","top","right","bottom","left","align","colors","scheme","nodeOpacity","nodeThickness","nodeInnerPadding","nodeSpacing","nodeBorderWidth","nodeBorderColor","from","modifiers","linkOpacity","linkHoverOthersOpacity","enableLinkGradient","labelPosition","labelPadding","labelTextColor","isInteractive","TestPositivityLines","markers","axis","value","lineStyle","stroke","strokeWidth","legendPosition","xScale","format","type","useUTC","xFormat","yScale","min","max","stacked","reverse","curve","axisTop","axisRight","axisBottom","tickValues","tickSize","tickPadding","tickRotation","legend","legendOffset","axisLeft","enablePoints","pointSize","pointColor","theme","pointBorderWidth","pointBorderColor","pointLabelYOffset","legends","anchor","direction","justify","translateX","translateY","itemsSpacing","itemDirection","itemWidth","itemHeight","itemOpacity","symbolSize","symbolShape","symbolBorderColor","effects","on","style","itemBackground","CaseDensityLines","MyInfectionLine","IcuLines","App","className","width","height","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e09bae1b.chunk.js","sourcesContent":["import './App.css';\nimport {ResponsiveSankey} from \"@nivo/sankey\";\nimport {ResponsiveLine} from \"@nivo/line\";\nimport * as metroData from './data/metro.json';\nimport * as multnomahData from './data/multnomah.json';\nimport * as washingtonData from './data/washington.json';\n\n// 051, 067 : multnomah, washington\n\nconst rtInfection = [{\n    id: 'Metro Area',\n    data: metroData.metricsTimeseries.filter(el => el.infectionRate !== null).map(el => {\n        return {\n            x: el.date,\n            y: el.infectionRate\n        }\n    })\n}];\n\nconst testPositivityData = [{\n    id: 'Multnomah County',\n    data: multnomahData.metricsTimeseries.filter(el => el.testPositivityRatio !== null).map(el => {\n        return {\n            x: el.date,\n            y: el.testPositivityRatio\n        }\n    })\n},\n    {\n        id: 'Washington County',\n        data: washingtonData.metricsTimeseries.filter(el => el.testPositivityRatio !== null).map(el => {\n            return {\n                x: el.date,\n                y: el.testPositivityRatio\n            }\n        })\n    }];\n\nconst caseCountData = [{\n    id: 'Metro Area',\n    data: metroData.metricsTimeseries.filter(el => el.caseDensity !== null).map(el => {\n        return {\n            x: el.date,\n            y: el.caseDensity\n        }\n    })\n}]\n\nconst icuData = [{\n    id: 'Metro Area',\n    data: metroData.metricsTimeseries.filter(el => el.icuCapacityRatio !== null).map(el => {\n        return {\n            x: el.date,\n            y: el.icuCapacityRatio\n        }\n    })\n},{\n\n    id: 'Multnomah County',\n    data: multnomahData.metricsTimeseries.filter(el => el.icuCapacityRatio !== null).map(el => {\n        return {\n            x: el.date,\n            y: el.icuCapacityRatio\n        }\n    })\n},\n    {\n        id: 'Washington County',\n        data: washingtonData.metricsTimeseries.filter(el => el.icuCapacityRatio !== null && el.icuCapacityRatio < 1).map(el => {\n            return {\n                x: el.date,\n                y: el.icuCapacityRatio\n            }\n        })\n    }]\n\nconst sampleData = {\n    \"nodes\": [\n        {\n            \"id\": \"Uninfected\",\n            \"color\": \"#000000\"\n        },\n        {\n            \"id\": \"Infected\",\n            \"color\": \"#000000\"\n        },\n        {\n            \"id\": \"Not Tested\",\n            \"color\": \"#5c5c5c\"\n        },\n        // {\n        //     \"id\": \"Diagnosed\",\n        //     \"color\": \"#f8a8a8\"\n        // },\n        {\n            \"id\": \"Home-tested\",\n            \"color\": \"#000000\"\n        },\n        {\n            \"id\": \"Lab-tested\",\n            \"color\": \"#000000\"\n        },\n        {\n            \"id\": \"Negative\",\n            \"color\": \"#000000\"\n        },\n        {\n            \"id\": \"Positive\",\n            \"color\": \"#000000\"\n        },\n        // {\n        //     \"id\": \"Positivity Ratio\",\n        //     \"color\": \"#000000\"\n        // }\n    ],\n    \"links\": [\n        {\n            \"source\": \"Uninfected\",\n            \"target\": \"Home-tested\",\n            \"value\": 20\n        },\n        {\n            \"source\": \"Uninfected\",\n            \"target\": \"Lab-tested\",\n            \"value\": 70\n        },\n        {\n            \"source\": \"Uninfected\",\n            \"target\": \"Not Tested\",\n            \"value\": 60\n        },\n        {\n            \"source\": \"Infected\",\n            \"target\": \"Not Tested\",\n            \"value\": 10\n        },\n        // {\n        //     \"source\": \"Infected\",\n        //     \"target\": \"Diagnosed\",\n        //     \"value\": 80\n        // },\n        {\n            // \"source\": \"Diagnosed\",\n            \"source\": \"Infected\",\n            \"target\": \"Home-tested\",\n            \"value\": 10\n        },\n        {\n            // \"source\": \"Diagnosed\",\n            \"source\": \"Infected\",\n            \"target\": \"Lab-tested\",\n            \"value\": 20\n        },\n        {\n            \"source\": \"Lab-tested\",\n            \"target\": \"Negative\",\n            \"value\":70\n        },\n        {\n            \"source\": \"Lab-tested\",\n            \"target\": \"Positive\",\n            \"value\": 20\n        },\n        // {\n        //     \"source\": \"Negative\",\n        //     \"target\": \"Positivity Ratio\",\n        //     \"value\":50\n        // },\n        // {\n        //     \"source\": \"Positive\",\n        //     \"target\": \"Positivity Ratio\",\n        //     \"value\":20\n        // }\n    ]\n};\n\nconst MyResponsiveSankey = ({data}: any) => (\n    <ResponsiveSankey\n        data={data}\n        margin={{top: 40, right: 160, bottom: 40, left: 50}}\n        align=\"start\"\n        colors={{scheme: 'category10'}}\n        nodeOpacity={1}\n        nodeThickness={18}\n        nodeInnerPadding={3}\n        nodeSpacing={24}\n        nodeBorderWidth={0}\n        nodeBorderColor={{from: 'color', modifiers: [['darker', 0.8]]}}\n        linkOpacity={0.5}\n        linkHoverOthersOpacity={0.1}\n        enableLinkGradient={true}\n        labelPosition=\"inside\"\n        // labelOrientation=\"vertical\"\n        labelPadding={6}\n        labelTextColor={{from: 'color', modifiers: [['darker', 1]]}}\n        isInteractive={false}\n        // legends={[\n        //     {\n        //         anchor: 'bottom-right',\n        //         direction: 'column',\n        //         translateX: 130,\n        //         itemWidth: 100,\n        //         itemHeight: 14,\n        //         itemDirection: 'right-to-left',\n        //         itemsSpacing: 2,\n        //         itemTextColor: '#999',\n        //         symbolSize: 14,\n        //         effects: [\n        //             {\n        //                 on: 'hover',\n        //                 style: {\n        //                     itemTextColor: '#000'\n        //                 }\n        //             }\n        //         ]\n        //     }\n        // ]}\n    />\n)\n\nconst TestPositivityLines = ({ data }: any) => (\n    <ResponsiveLine\n        markers={[\n            {\n                axis: 'y',\n                value: 0.05,\n                lineStyle: { stroke: '#b0413e', strokeWidth: 1 },\n                // legend: 'y marker at 0',\n                legendPosition: 'bottom-left',\n            },\n        ]}\n        data={data}\n        margin={{ top: 50, right: 140, bottom: 50, left: 60 }}\n        // xScale={{ format: \"%Y-%m-%dT%H:%M:%S.%L%Z\", type: \"time\" }}\n        xScale={{\n            format: \"%Y-%m-%d\",\n            type: \"time\",\n            useUTC: false,\n        }}\n        // xFormat=\"time:%Y-%m-%dT%H:%M:%S.%L%Z\"\n        xFormat=\"time:%Y-%m-%d\"\n        yScale={{ type: 'linear', min: 0, max: 'auto', stacked: true, reverse: false }}\n        // yFormat=\" >-.2f\"\n        curve=\"cardinal\"\n        axisTop={null}\n        axisRight={null}\n        // axisBottom={{\n        //     // orient: 'bottom',\n        //     tickSize: 5,\n        //     tickPadding: 5,\n        //     tickRotation: 0,\n        //     legend: 'transportation',\n        //     legendOffset: 36,\n        //     legendPosition: 'middle'\n        // }}\n        axisBottom={{\n            tickValues: \"every 3 month\",\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: 0,\n            format: \"%Y-%m\",\n            legend: \"Time\",\n            legendOffset: 36,\n            legendPosition: \"middle\"\n        }}\n        axisLeft={{\n            // orient: 'left',\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: 0,\n            legend: 'count',\n            legendOffset: -40,\n            legendPosition: 'middle'\n        }}\n        enablePoints={false}\n        pointSize={10}\n        pointColor={{ theme: 'background' }}\n        pointBorderWidth={2}\n        pointBorderColor={{ from: 'serieColor' }}\n        pointLabelYOffset={-12}\n        isInteractive={false}\n        // useMesh={true}\n        legends={[\n            {\n                anchor: 'bottom-right',\n                direction: 'column',\n                justify: false,\n                translateX: 140,\n                translateY: 0,\n                itemsSpacing: 0,\n                itemDirection: 'left-to-right',\n                itemWidth:120,\n                itemHeight: 20,\n                itemOpacity: 0.75,\n                symbolSize: 12,\n                symbolShape: 'circle',\n                symbolBorderColor: 'rgba(0, 0, 0, .5)',\n                effects: [\n                    {\n                        on: 'hover',\n                        style: {\n                            itemBackground: 'rgba(0, 0, 0, .03)',\n                            itemOpacity: 1\n                        }\n                    }\n                ]\n            }\n        ]}\n    />\n)\n\nconst CaseDensityLines = ({ data }: any) => (\n    <ResponsiveLine\n        markers={[\n            {\n                axis: 'y',\n                value: 10,\n                lineStyle: { stroke: '#b0413e', strokeWidth: 1 },\n                // legend: 'y marker at 0',\n                legendPosition: 'bottom-left',\n            },\n        ]}\n        data={data}\n        margin={{ top: 50, right: 110, bottom: 50, left: 60 }}\n        // xScale={{ format: \"%Y-%m-%dT%H:%M:%S.%L%Z\", type: \"time\" }}\n        xScale={{\n            format: \"%Y-%m-%d\",\n            type: \"time\",\n            useUTC: false,\n        }}\n        // xFormat=\"time:%Y-%m-%dT%H:%M:%S.%L%Z\"\n        xFormat=\"time:%Y-%m-%d\"\n        yScale={{ type: 'linear', min: 0, max: 'auto', stacked: true, reverse: false }}\n        // yFormat=\" >-.2f\"\n        curve=\"cardinal\"\n        axisTop={null}\n        axisRight={null}\n        // axisBottom={{\n        //     // orient: 'bottom',\n        //     tickSize: 5,\n        //     tickPadding: 5,\n        //     tickRotation: 0,\n        //     legend: 'transportation',\n        //     legendOffset: 36,\n        //     legendPosition: 'middle'\n        // }}\n        axisBottom={{\n            tickValues: \"every 3 month\",\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: 0,\n            format: \"%Y-%m\",\n            legend: \"Time\",\n            legendOffset: 36,\n            legendPosition: \"middle\"\n        }}\n        axisLeft={{\n            // orient: 'left',\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: 0,\n            legend: 'count',\n            legendOffset: -40,\n            legendPosition: 'middle'\n        }}\n        enablePoints={false}\n        pointSize={10}\n        pointColor={{ theme: 'background' }}\n        pointBorderWidth={2}\n        pointBorderColor={{ from: 'serieColor' }}\n        pointLabelYOffset={-12}\n        isInteractive={false}\n        // useMesh={true}\n        legends={[\n            {\n                anchor: 'bottom-right',\n                direction: 'column',\n                justify: false,\n                translateX: 100,\n                translateY: 0,\n                itemsSpacing: 0,\n                itemDirection: 'left-to-right',\n                itemWidth: 80,\n                itemHeight: 20,\n                itemOpacity: 0.75,\n                symbolSize: 12,\n                symbolShape: 'circle',\n                symbolBorderColor: 'rgba(0, 0, 0, .5)',\n                effects: [\n                    {\n                        on: 'hover',\n                        style: {\n                            itemBackground: 'rgba(0, 0, 0, .03)',\n                            itemOpacity: 1\n                        }\n                    }\n                ]\n            }\n        ]}\n    />\n)\n\nconst MyInfectionLine = ({ data }: any) => (\n    <ResponsiveLine\n        markers={[\n            {\n                axis: 'y',\n                value: 1,\n                lineStyle: { stroke: '#b0413e', strokeWidth: 1 },\n                // legend: 'y marker at 0',\n                legendPosition: 'bottom-left',\n            },\n        ]}\n        data={data}\n        margin={{ top: 50, right: 110, bottom: 50, left: 60 }}\n        // xScale={{ format: \"%Y-%m-%dT%H:%M:%S.%L%Z\", type: \"time\" }}\n        xScale={{\n            format: \"%Y-%m-%d\",\n            type: \"time\",\n            useUTC: false,\n        }}\n        // xFormat=\"time:%Y-%m-%dT%H:%M:%S.%L%Z\"\n        xFormat=\"time:%Y-%m-%d\"\n        yScale={{ type: 'linear', min: 0, max: 'auto', stacked: true, reverse: false }}\n        // yFormat=\" >-.2f\"\n        curve=\"cardinal\"\n        axisTop={null}\n        axisRight={null}\n        // axisBottom={{\n        //     // orient: 'bottom',\n        //     tickSize: 5,\n        //     tickPadding: 5,\n        //     tickRotation: 0,\n        //     legend: 'transportation',\n        //     legendOffset: 36,\n        //     legendPosition: 'middle'\n        // }}\n        axisBottom={{\n            tickValues: \"every 3 month\",\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: 0,\n            format: \"%Y-%m\",\n            legend: \"Time\",\n            legendOffset: 36,\n            legendPosition: \"middle\"\n        }}\n        axisLeft={{\n            // orient: 'left',\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: 0,\n            legend: 'count',\n            legendOffset: -40,\n            legendPosition: 'middle'\n        }}\n        enablePoints={false}\n        pointSize={10}\n        pointColor={{ theme: 'background' }}\n        pointBorderWidth={2}\n        pointBorderColor={{ from: 'serieColor' }}\n        pointLabelYOffset={-12}\n        isInteractive={false}\n        // useMesh={true}\n        legends={[\n            {\n                anchor: 'bottom-right',\n                direction: 'column',\n                justify: false,\n                translateX: 100,\n                translateY: 0,\n                itemsSpacing: 0,\n                itemDirection: 'left-to-right',\n                itemWidth: 80,\n                itemHeight: 20,\n                itemOpacity: 0.75,\n                symbolSize: 12,\n                symbolShape: 'circle',\n                symbolBorderColor: 'rgba(0, 0, 0, .5)',\n                effects: [\n                    {\n                        on: 'hover',\n                        style: {\n                            itemBackground: 'rgba(0, 0, 0, .03)',\n                            itemOpacity: 1\n                        }\n                    }\n                ]\n            }\n        ]}\n    />\n)\n\nconst IcuLines = ({ data }: any) => (\n    <ResponsiveLine\n        markers={[\n            {\n                axis: 'y',\n                value: 0.85,\n                lineStyle: { stroke: '#b0413e', strokeWidth: 1 },\n                // legend: 'y marker at 0',\n                legendPosition: 'bottom-left',\n            },\n        ]}\n        data={data}\n        margin={{ top: 50, right: 140, bottom: 50, left: 60 }}\n        // xScale={{ format: \"%Y-%m-%dT%H:%M:%S.%L%Z\", type: \"time\" }}\n        xScale={{\n            format: \"%Y-%m-%d\",\n            type: \"time\",\n            useUTC: false,\n        }}\n        // xFormat=\"time:%Y-%m-%dT%H:%M:%S.%L%Z\"\n        xFormat=\"time:%Y-%m-%d\"\n        yScale={{ type: 'linear', min: 'auto', max: 1, stacked: false, reverse: false }}\n        // yFormat=\" >-.2f\"\n        curve=\"cardinal\"\n        axisTop={null}\n        axisRight={null}\n        // axisBottom={{\n        //     // orient: 'bottom',\n        //     tickSize: 5,\n        //     tickPadding: 5,\n        //     tickRotation: 0,\n        //     legend: 'transportation',\n        //     legendOffset: 36,\n        //     legendPosition: 'middle'\n        // }}\n        axisBottom={{\n            tickValues: \"every 3 month\",\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: 0,\n            format: \"%Y-%m\",\n            legend: \"Time\",\n            legendOffset: 36,\n            legendPosition: \"middle\"\n        }}\n        axisLeft={{\n            // orient: 'left',\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: 0,\n            legend: 'count',\n            legendOffset: -40,\n            legendPosition: 'middle'\n        }}\n        enablePoints={false}\n        pointSize={10}\n        pointColor={{ theme: 'background' }}\n        pointBorderWidth={2}\n        pointBorderColor={{ from: 'serieColor' }}\n        pointLabelYOffset={-12}\n        isInteractive={false}\n        // enableArea={true}\n        // useMesh={true}\n        legends={[\n            {\n                anchor: 'bottom-right',\n                direction: 'column',\n                justify: false,\n                translateX: 140,\n                translateY: 0,\n                itemsSpacing: 0,\n                itemDirection: 'left-to-right',\n                itemWidth: 120,\n                itemHeight: 20,\n                itemOpacity: 0.75,\n                symbolSize: 12,\n                symbolShape: 'circle',\n                symbolBorderColor: 'rgba(0, 0, 0, .5)',\n                effects: [\n                    {\n                        on: 'hover',\n                        style: {\n                            itemBackground: 'rgba(0, 0, 0, .03)',\n                            itemOpacity: 1\n                        }\n                    }\n                ]\n            }\n        ]}\n    />\n)\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <div>\n                <p>\n                    When trying to measure the impact of COVID in an area, the first thing we need\n                    to do is measure how many people have it. Diagnosing this officially requires\n                    a test.\n                </p>\n                <p>\n                    Testing, however is a challenge (actual numbers not to scale):\n                </p>\n                <div style={{ width: 700, height:300 }}>\n                    <MyResponsiveSankey data={sampleData}/>\n                </div>\n                <p>\n                    \"Test positivity\" stats only compare reported positives to reported negatives,\n                    and so they miss undiagnosed cases, as well as home testing. Additionally, as infection\n                    prevalence increases, if we don't have enough tests to meet the demand, test positivity\n                    increases. For this reason and others, an increase in test positivity is an indication\n                    of an outbreak, even if recorded case count still appears low. The CDC recommends any\n                    level above 5% as cause for concern:\n                </p>\n                <div style={{ width: 700, height: 300}}>\n                    <TestPositivityLines data={testPositivityData}/>\n                </div>\n                <p>\n                    That said, while testing may not capture every case, a rise in test positivity rate\n                    does tend to correlate with an increased level of cases. CDC tracks this through \"daily\n                    new cases per 100k population\", and says there is increased virus prevalence when the\n                    metric reaches 10 or above.\n                </p>\n                <div style={{ width: 700, height: 300}}>\n                    <CaseDensityLines data={caseCountData}/>\n                </div>\n                <p>\n                    An effective reproductive number can be derived from the case count data and other data.\n                    The effective reproductive number, or Rt, is how many people an infected person infects\n                    on average. Any number above 1 means the outbreak is growing over time. In other words,\n                    the cases will double over some time period, more quickly as Rt increases.\n                </p>\n                <div style={{ width: 700, height:300 }}>\n                    <MyInfectionLine data={rtInfection}/>\n                </div>\n                <p>\n                    As a serious disease increases in prevalence, hospitalizations will increase as well.\n                    Ultimately, deaths increase too, both from the disease, and from hospitals unable to\n                    give routine service due to overcrowding. So we also track ICU capacity. Anything above\n                    85% utilization is considered critical:\n                </p>\n                <div style={{ width: 700, height: 300}}>\n                    <IcuLines data={icuData}/>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}